<?php

namespace App\Http\Controllers;

use App\Models\Employe;
use App\Models\Planning;
use Barryvdh\DomPDF\Facade\Pdf as PDF;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

class ExportController extends Controller
{
    public function exportPlannings(Request $request)
    {
        $employe_id = $request->input('employe_id');
        $mois = $request->input('mois');

        \Log::info('Début export plannings', [
            'mois_recu' => $mois,
            'employe_id' => $employe_id,
            'user_id' => auth()->id(),
            'societe_id' => auth()->user()->societe_id
        ]);

        // Gérer le format "YYYY-MM"
        try {
            if (preg_match('/^\d{4}-\d{2}$/', $mois)) {
                $date = \Carbon\Carbon::createFromFormat('Y-m', $mois);
            } else {
                $date = \Carbon\Carbon::parse($mois);
            }
        } catch (\Exception $e) {
            \Log::error('Erreur de parsing de date', [
                'mois' => $mois,
                'error' => $e->getMessage()
            ]);
            $date = now();
        }

        $date_debut = $date->copy()->startOfMonth()->format('Y-m-d');
        $date_fin = $date->copy()->endOfMonth()->format('Y-m-d');

        // Récupérer d'abord les plannings pour le mois
        $plannings = \App\Models\Planning::with(['employe', 'lieu'])
            ->where('societe_id', auth()->user()->societe_id)
            ->whereBetween('date', [$date_debut, $date_fin]);

        if ($employe_id) {
            $plannings->where('employe_id', $employe_id);
        }

        $plannings = $plannings->orderBy('date', 'asc')
            ->orderBy('heure_debut', 'asc')
            ->get();

        // Grouper les plannings par employé
        $planningsParEmploye = $plannings->groupBy('employe_id');
        
        // Récupérer les employés concernés
        $employes = \App\Models\Employe::whereIn('id', $planningsParEmploye->keys())
            ->where('societe_id', auth()->user()->societe_id)
            ->get()
            ->map(function($employe) use ($planningsParEmploye) {
                // Attacher les plannings à chaque employé
                $employe->setRelation('plannings', $planningsParEmploye[$employe->id]);
                return $employe;
            });

        \Log::info('Données récupérées', [
            'date_debut' => $date_debut,
            'date_fin' => $date_fin,
            'nb_employes' => $employes->count(),
            'nb_plannings' => $plannings->count(),
            'employes_ids' => $employes->pluck('id'),
            'plannings_dates' => $plannings->pluck('date')->unique()->sort()->values()
        ]);

        $pdf = PDF::loadView('exports.plannings', [
            'employes' => $employes,
            'date_debut' => $date_debut,
            'date_fin' => $date_fin,
            'societe' => Auth::user()->societe,
            'mois' => $date->locale('fr')->isoFormat('MMMM YYYY')
        ]);

        $filename = 'planning';
        if ($employe_id) {
            $employe = $employes->first();
            if ($employe) {
                $filename .= '-' . Str::slug($employe->nom . '-' . $employe->prenom);
            }
        }
        $filename .= '-' . $date->format('m-Y') . '.pdf';

        return $pdf->download($filename);
    }

    public function exportCompta(Request $request)
    {
        $mois = $request->input('mois', now()->format('Y-m'));
        $employe_id = $request->input('employe_id');
        $societe = Auth::user()->societe;
        
        // Récupérer les données pour le mois sélectionné
        $debut_mois = \Carbon\Carbon::createFromFormat('Y-m', $mois)->startOfMonth();
        $fin_mois = \Carbon\Carbon::createFromFormat('Y-m', $mois)->endOfMonth();
        
        $query = Planning::where('societe_id', $societe->id)
            ->whereBetween('date', [$debut_mois, $fin_mois]);

        // Filtrer par employé si spécifié
        if ($employe_id) {
            $query->where('employe_id', $employe_id);
        }

        $plannings = $query->with(['employe', 'lieu'])->get();

        $pdf = PDF::loadView('exports.compta', [
            'plannings' => $plannings,
            'societe' => $societe,
            'mois' => $mois,
            'employe_id' => $employe_id
        ]);

        $filename = 'comptabilite';
        if ($employe_id) {
            $employe = $plannings->first()->employe;
            $filename .= '-' . Str::slug($employe->nom . '-' . $employe->prenom);
        }
        $filename .= '-' . $mois . '.pdf';

        return $pdf->download($filename);
    }
    
    public function exportComptabilite(Request $request)
    {
        $mois = $request->input('mois', now()->format('Y-m'));
        $employe_id = $request->input('employe_id');
        $societe = Auth::user()->societe;
        
        // Vérifier si l'employé existe et appartient à la société de l'utilisateur
        if ($employe_id) {
            $employe = \App\Models\Employe::where('id', $employe_id)
                ->where('societe_id', $societe->id)
                ->with('user')
                ->first();
                
            if (!$employe) {
                return back()->with('error', 'Employé non trouvé.');
            }
            
            $nomEmploye = $employe->prenom . ' ' . $employe->nom;
        } else {
            return back()->with('error', 'Veuillez sélectionner un employé.');
        }
        
        // Convertir le mois en objet Carbon pour les comparaisons
        $dateDebut = \Carbon\Carbon::createFromFormat('Y-m', $mois)->startOfMonth();
        $dateFin = \Carbon\Carbon::createFromFormat('Y-m', $mois)->endOfMonth();
        
        // Récupérer tous les plannings du mois pour l'employé
        $plannings = Planning::where('employe_id', $employe_id)
            ->whereBetween('date', [$dateDebut, $dateFin])
            ->with('lieu')
            ->orderBy('date')
            ->get();
            
        // Initialiser les totaux du mois
        $totalHeuresMois = 0;
        $totalHeuresSup25 = 0;
        $totalHeuresSup50 = 0;
        $totalHeuresNuit = 0;
        $totalHeuresDimanche = 0;
        $totalHeuresJoursFeries = 0;
        $totalAbsences = 0;
        
        // Récupérer les plannings par semaine pour l'affichage
        $detailHeuresSupp = [];
        $date = $dateDebut->copy()->startOfWeek(\Carbon\Carbon::MONDAY);
        $finMoisEtSemaine = $dateFin->copy()->endOfWeek(\Carbon\Carbon::SUNDAY);
        
        while ($date <= $finMoisEtSemaine) {
            $debutSemaine = $date->copy()->startOfWeek(\Carbon\Carbon::MONDAY);
            $finSemaine = $debutSemaine->copy()->endOfWeek(\Carbon\Carbon::SUNDAY);
            
            // Calculer les heures de la semaine
            $heuresSemaine = 0;
            $heuresNuitSemaine = 0;
            $heuresDimancheSemaine = 0;
            $heuresJoursFeriesSemaine = 0;
            $absencesSemaine = 0;
            
            $planningsSemaine = $plannings->filter(function($planning) use ($debutSemaine, $finSemaine) {
                $datePlanning = \Carbon\Carbon::parse($planning->date);
                return $datePlanning >= $debutSemaine && $datePlanning <= $finSemaine;
            });
            
            // Pour le mois de janvier, on ne compte pas les absences
            // Pour les autres mois, on utilise une logique plus précise
            $moisActuel = $debutSemaine->format('m');
            
            if ($moisActuel == '01') { // Janvier
                $absencesSemaine = 0;
            } else {
                // Vérifier les jours où l'employé est censé travailler
                // On se base sur les plannings des semaines précédentes pour déterminer les jours habituels de travail
                
                // Pour simplifier, on considère comme jours de travail habituels les jours
                // où l'employé a travaillé au moins une fois dans le mois
                $joursHabituels = [];
                
                // Récupérer tous les plannings du mois pour cet employé
                foreach ($plannings as $planning) {
                    $jourSemaine = \Carbon\Carbon::parse($planning->date)->dayOfWeek;
                    $joursHabituels[$jourSemaine] = true;
                }
                
                // Calculer les jours où l'employé aurait dû travailler cette semaine
                $joursSemaine = [];
                $currentDay = $debutSemaine->copy();
                while ($currentDay <= $finSemaine) {
                    $jourSemaine = $currentDay->dayOfWeek;
                    // On ne compte que les jours où l'employé travaille habituellement
                    if (isset($joursHabituels[$jourSemaine])) {
                        $joursSemaine[] = $currentDay->format('Y-m-d');
                    }
                    $currentDay->addDay();
                }
                
                // Jours avec plannings
                $joursAvecPlannings = $planningsSemaine->pluck('date')->toArray();
                
                // Jours d'absence = jours où l'employé aurait dû travailler mais n'a pas de planning
                $joursAbsence = array_diff($joursSemaine, $joursAvecPlannings);
                $absencesSemaine = count($joursAbsence);
            }
            
            foreach ($planningsSemaine as $planning) {
                $heuresTravaillees = $planning->heures_travaillees;
                $heuresSemaine += $heuresTravaillees;
                
                $datePlanning = \Carbon\Carbon::parse($planning->date);
                
                // Calculer les heures de nuit (21h-06h)
                if (!empty($planning->heure_debut) && !empty($planning->heure_fin)) {
                    // Simplifié pour éviter les erreurs : si le planning est entre 21h et 6h, on compte 2h de nuit
                    $heureDebut = \Carbon\Carbon::parse($planning->heure_debut)->format('H');
                    $heureFin = \Carbon\Carbon::parse($planning->heure_fin)->format('H');
                    
                    if (($heureDebut >= 21 || $heureDebut < 6) || ($heureFin > 21 || $heureFin <= 6)) {
                        // Estimation simplifiée des heures de nuit
                        $heuresNuit = min(2, $heuresTravaillees);
                        $heuresNuitSemaine += $heuresNuit;
                    }
                }
                
                // Vérifier si c'est un dimanche
                if ($datePlanning->isDayOfWeek(0)) {
                    $heuresDimancheSemaine += $heuresTravaillees;
                }
                
                // Vérifier si c'est un jour férié
                if ($this->estJourFerie($datePlanning)) {
                    $heuresJoursFeriesSemaine += $heuresTravaillees;
                }
            }
            
            // Calculer les heures supplémentaires de la semaine
            $heuresSup25 = 0;
            $heuresSup50 = 0;
            
            if ($heuresSemaine > 35) {
                if ($heuresSemaine <= 43) {
                    $heuresSup25 = $heuresSemaine - 35;
                } else {
                    $heuresSup25 = 8; // de 36h à 43h
                    $heuresSup50 = $heuresSemaine - 43; // au-delà de 44h
                }
            }
            
            // Ajouter au total du mois si la semaine fait partie du mois
            if ($debutSemaine->month === $dateDebut->month || $finSemaine->month === $dateDebut->month) {
                $totalHeuresMois += $heuresSemaine;
                $totalHeuresSup25 += $heuresSup25;
                $totalHeuresSup50 += $heuresSup50;
                $totalHeuresNuit += $heuresNuitSemaine;
                $totalHeuresDimanche += $heuresDimancheSemaine;
                $totalAbsences += $absencesSemaine;
                
                // Log pour débogage
                \Log::info('Semaine ' . $semaine . ' - Heures de nuit: ' . $heuresNuitSemaine . ' - Total cumulé: ' . $totalHeuresNuit);
            }
            
            // Ajouter la semaine aux résultats si elle fait partie du mois
            if ($debutSemaine->month === $dateDebut->month || $finSemaine->month === $dateDebut->month) {
                $detailHeuresSupp[] = [
                    'semaine' => $debutSemaine->format('d') . ' au ' . $finSemaine->format('d/m/Y'),
                    'heures_travaillees' => $heuresSemaine,
                    'heures_25' => $heuresSup25,
                    'heures_50' => $heuresSup50,
                    'total_heures_supp' => $heuresSup25 + $heuresSup50,
                    'heures_nuit' => $heuresNuitSemaine,
                    'heures_dimanche' => $heuresDimancheSemaine,
                    'heures_jours_feries' => $heuresJoursFeriesSemaine,
                    'absences' => $absencesSemaine
                ];
                
                // Ajouter au total mensuel
                $totalHeuresJoursFeries += $heuresJoursFeriesSemaine;
            }
            
            $date->addWeek();
        }
            $heuresTravaillees = $planning->heures_travaillees;
            $heuresSemaine += $heuresTravaillees;
            
            $datePlanning = \Carbon\Carbon::parse($planning->date);
            
            // Calculer les heures de nuit (21h-06h)
            if (!empty($planning->heure_debut) && !empty($planning->heure_fin)) {
                // Vérifier si le lieu existe et n'est pas RH ou CP
                $lieuExclu = false;
                if ($planning->lieu && in_array($planning->lieu->nom, ['RH', 'CP'])) {
                    $lieuExclu = true;
                }
                
                if (!$lieuExclu) {
                    // Approche simplifiée pour le calcul des heures de nuit
                    $heureDebut = (int)\Carbon\Carbon::parse($planning->heure_debut)->format('H');
                    $heureFin = (int)\Carbon\Carbon::parse($planning->heure_fin)->format('H');
                    
                    // Si l'heure de fin est inférieure à l'heure de début, cela signifie que le service se termine le lendemain
                    if ($heureFin < $heureDebut) {
                        $heureFin += 24;
                    }
                    
                    // Calculer les heures de nuit
                    $heuresNuit = 0;
                    
                    // Cas 1: Service commence avant 21h et finit après 21h
                    if ($heureDebut < 21 && $heureFin > 21) {
                        // Heures de nuit = de 21h jusqu'à la fin du service (ou 6h max)
                        $heuresNuit += min($heureFin, 30) - 21; // 30 = 6h + 24h
                    }
                    
                    // Cas 2: Service commence après 21h et avant 6h
                    if ($heureDebut >= 21 || $heureDebut < 6) {
                        $debutCalcul = $heureDebut;
                        $finCalcul = min($heureFin, 30); // 30 = 6h + 24h
                        
                        if ($debutCalcul >= 21) {
                            // Service de nuit qui commence après 21h
                            $heuresNuit += $finCalcul - $debutCalcul;
                        } else {
                            // Service de nuit qui commence avant 6h
                            $heuresNuit += min($finCalcul, 6) - $debutCalcul;
                        }
                    }
                    
                    // Log pour débogage
                    \Log::info('Planning du ' . $planning->date . ' - Heures de nuit: ' . $heuresNuit . ' (début: ' . $heureDebut . 'h, fin: ' . $heureFin . 'h)');
                    
                    $heuresNuitSemaine += $heuresNuit;
                }
            }
            
            // Vérifier si c'est un dimanche
            if ($datePlanning->isDayOfWeek(0)) {
                $heuresDimancheSemaine += $heuresTravaillees;
            }
            
            // Vérifier si c'est un jour férié
            if ($this->estJourFerie($datePlanning)) {
                $heuresJoursFeriesSemaine += $heuresTravaillees;
            }
        }
        
        // Calculer les heures supplémentaires de la semaine
        $heuresSup25 = 0;
        $heuresSup50 = 0;
        
        if ($heuresSemaine > 35) {
            if ($heuresSemaine <= 43) {
                $heuresSup25 = $heuresSemaine - 35;
            } else {
                $heuresSup25 = 8; // 43 - 35 = 8 heures à 25%
                $heuresSup50 = $heuresSemaine - 43;
            }
        }
        
        // Ajouter au total du mois
        $totalHeures += $heuresSemaine;
        $totalHeuresSup25 += $heuresSup25;
        $totalHeuresSup50 += $heuresSup50;
        $totalHeuresNuit += $heuresNuitSemaine;
        $totalHeuresDimanche += $heuresDimancheSemaine;
        $totalHeuresJoursFeries += $heuresJoursFeriesSemaine;
        $totalAbsences += $absencesSemaine;
        
        // Log pour débogage
        \Log::info('Semaine ' . $semaine . ' - Heures de nuit: ' . $heuresNuitSemaine . ' - Total cumulé: ' . $totalHeuresNuit);
    }
    
    // Calculer les montants si le taux horaire est disponible
    $tauxHoraire = $employe->taux_horaire ?? 0;
    $montant25 = $totalHeuresSup25 * $tauxHoraire * 1.25;
    $montant50 = $totalHeuresSup50 * $tauxHoraire * 1.5;
    $montantNuit = $totalHeuresNuit * $tauxHoraire * 1.1; // Majoration de 10% pour les heures de nuit
    $montantDimanche = $totalHeuresDimanche * $tauxHoraire * 1.5; // Majoration de 50% pour les dimanches
    $montantJoursFeries = $totalHeuresJoursFeries * $tauxHoraire * 2; // Majoration de 100% pour les jours fériés
    $montantTotal = $montant25 + $montant50 + $montantNuit + $montantDimanche + $montantJoursFeries;
    
    return [
        'total_heures' => $totalHeures,
        'heures_25' => $totalHeuresSup25,
        'heures_50' => $totalHeuresSup50,
        'heures_nuit' => $totalHeuresNuit,
        'heures_dimanche' => $totalHeuresDimanche,
        'heures_jours_feries' => $totalHeuresJoursFeries,
        'absences' => $totalAbsences,
        'taux_horaire' => $tauxHoraire,
        'montant_25' => $montant25,
        'montant_50' => $montant50,
        'montant_nuit' => $montantNuit,
        'montant_dimanche' => $montantDimanche,
        'montant_jours_feries' => $montantJoursFeries,
        'montant_total' => $montantTotal,
    ];
  }
}