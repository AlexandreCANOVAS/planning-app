<?php

namespace App\Http\Controllers;

use App\Models\Planning;
use App\Models\Employe;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;

class ComptabiliteController extends Controller
{
    public function index()
    {
        // Récupérer les employés de la société de l'utilisateur connecté
        $employes = Employe::where('societe_id', Auth::user()->societe_id)
            ->with('user')
            ->get();
            
        $moisActuel = Carbon::now()->format('Y-m');
        return view('comptabilite.index', compact('employes', 'moisActuel'));
    }

    public function calculerHeures(Request $request)
    {
        try {
            $request->validate([
                'employe_id' => 'required|exists:employes,id',
                'mois' => 'required|date_format:Y-m'
            ]);

            $employeId = $request->employe_id;
            $mois = $request->mois;

            // Convertir le mois en objet Carbon pour les comparaisons
            $dateDebut = Carbon::createFromFormat('Y-m', $mois)->startOfMonth();
            $dateFin = Carbon::createFromFormat('Y-m', $mois)->endOfMonth();

            // Récupérer tous les plannings du mois
            $plannings = Planning::where('employe_id', $employeId)
                ->whereBetween('date', [$dateDebut, $dateFin])
                ->orderBy('date')
                ->get();
                
            // Récupérer l'employé pour connaître son planning normal
            $employe = Employe::with('user')->find($employeId);

            // Initialiser les totaux du mois
            $totalHeuresMois = 0;
            $totalHeuresSup25 = 0;
            $totalHeuresSup50 = 0;
            $totalHeuresNuit = 0;
            $totalHeuresDimanche = 0;
            $totalHeuresJoursFeries = 0;
            $totalAbsences = 0;
            
            // Tableaux pour stocker les détails des jours spéciaux
            $detailsDimanches = [];
            $detailsJoursFeries = [];
            $detailsHeuresNuit = [];

            // Récupérer les plannings par semaine pour l'affichage
            $resultatsSemaines = [];
            $date = $dateDebut->copy()->startOfWeek(Carbon::MONDAY);
            $finMoisEtSemaine = $dateFin->copy()->endOfWeek(Carbon::SUNDAY);

            while ($date <= $finMoisEtSemaine) {
                $debutSemaine = $date->copy()->startOfWeek(Carbon::MONDAY);
                $finSemaine = $debutSemaine->copy()->endOfWeek(Carbon::SUNDAY);

                // Calculer les heures de la semaine
                $heuresSemaine = 0;
                $heuresSup25 = 0;
                $heuresSup50 = 0;
                $heuresNuitSemaine = 0;
                $heuresDimancheSemaine = 0;
                $heuresJoursFeriesSemaine = 0;
                $absencesSemaine = 0;
                
                $planningsSemaine = $plannings->filter(function($planning) use ($debutSemaine, $finSemaine) {
                    $datePlanning = Carbon::parse($planning->date);
                    return $datePlanning >= $debutSemaine && $datePlanning <= $finSemaine;
                });

                // Jours de la semaine qui font partie du mois
                $joursOuvresSemaine = 0;
                $jourCourant = $debutSemaine->copy();
                while ($jourCourant <= $finSemaine) {
                    if ($jourCourant->month === $dateDebut->month && $jourCourant->dayOfWeek !== Carbon::SUNDAY && !$this->estJourFerie($jourCourant)) {
                        $joursOuvresSemaine++;
                    }
                    $jourCourant->addDay();
                }

                foreach ($planningsSemaine as $planning) {
                    $heuresTravaillees = abs($this->convertHHMMToFloat($planning->heures_travaillees));
                    $heuresSemaine += $heuresTravaillees;
                    
                    $datePlanning = Carbon::parse($planning->date);
                    
                    // Calcul des heures de nuit (21h-06h)
                    if (!empty($planning->heure_debut) && !empty($planning->heure_fin)) {
                        $heureDebut = Carbon::parse($planning->heure_debut)->format('H');
                        $heureFin = Carbon::parse($planning->heure_fin)->format('H');
                      // Calculer les heures de nuit (21h-06h)
                    if ($heureFin > 21 || $heureDebut < 6) {
                        if ($heureFin > 21) {
                            $heuresNuit = min($heureFin - 21, $heuresTravaillees);
                            $heuresNuitSemaine += $heuresNuit;
                            
                            // Ajouter aux détails des heures de nuit
                            if (!isset($detailsHeuresNuit[$datePlanning->format('Y-m-d')])) {
                                $detailsHeuresNuit[$datePlanning->format('Y-m-d')] = [
                                    'date' => $datePlanning->format('d/m/Y'),
                                    'jour' => $datePlanning->locale('fr')->isoFormat('dddd'),
                                    'heures' => 0
                                ];
                            }
                            $detailsHeuresNuit[$datePlanning->format('Y-m-d')]['heures'] += $heuresNuit;
                        }
                        if ($heureDebut < 6) {
                            $heuresNuit = min(6 - $heureDebut, $heuresTravaillees);
                            $heuresNuitSemaine += $heuresNuit;
                            
                            // Ajouter aux détails des heures de nuit
                            if (!isset($detailsHeuresNuit[$datePlanning->format('Y-m-d')])) {
                                $detailsHeuresNuit[$datePlanning->format('Y-m-d')] = [
                                    'date' => $datePlanning->format('d/m/Y'),
                                    'jour' => $datePlanning->locale('fr')->isoFormat('dddd'),
                                    'heures' => 0
                                ];
                            }
                            $detailsHeuresNuit[$datePlanning->format('Y-m-d')]['heures'] += $heuresNuit;
                        }
                    }
                    
                    // Calculer les heures de dimanche
                    if ($datePlanning->isDayOfWeek(Carbon::SUNDAY)) {
                        $heuresDimancheSemaine += $heuresTravaillees;
                        
                        // Ajouter aux détails des dimanches
                        if (!isset($detailsDimanches[$datePlanning->format('Y-m-d')])) {
                            $detailsDimanches[$datePlanning->format('Y-m-d')] = [
                                'date' => $datePlanning->format('d/m/Y'),
                                'heures' => 0
                            ];
                        }
                        $detailsDimanches[$datePlanning->format('Y-m-d')]['heures'] += $heuresTravaillees;
                    }
                    
                    // Calculer les heures de jours fériés
                    if ($this->estJourFerie($datePlanning)) {
                        $heuresJoursFeriesSemaine += $heuresTravaillees;
                        
                        // Ajouter aux détails des jours fériés
                        if (!isset($detailsJoursFeries[$datePlanning->format('Y-m-d')])) {
                            $detailsJoursFeries[$datePlanning->format('Y-m-d')] = [
                                'date' => $datePlanning->format('d/m/Y'),
                                'nom' => $this->getNomJourFerie($datePlanning),
                                'heures' => 0
                            ];
                        }
                        $detailsJoursFeries[$datePlanning->format('Y-m-d')]['heures'] += $heuresTravaillees;
                    }
                }
                
                // Calculer les absences (jours ouvrés sans planning)
                $joursAvecPlanning = $planningsSemaine->pluck('date')->map(function($date) {
                    return Carbon::parse($date)->format('Y-m-d');
                })->unique()->count();
                
                if ($joursOuvresSemaine > $joursAvecPlanning) {
                    $absencesSemaine = $joursOuvresSemaine - $joursAvecPlanning;
                }

                // Calculer les heures supplémentaires de la semaine
                $heuresSup25 = 0;
                $heuresSup50 = 0;

                if ($heuresSemaine > 35) {
                    if ($heuresSemaine <= 43) {
                        $heuresSup25 = $heuresSemaine - 35;
                    } else {
                        $heuresSup25 = 8; // de 36h à 43h
                        $heuresSup50 = $heuresSemaine - 43; // au-delà de 44h
                    }
                }

                // Ajouter au total du mois
                if ($debutSemaine->month === $dateDebut->month || $finSemaine->month === $dateDebut->month) {
                    $totalHeuresMois += $heuresSemaine;
                    $totalHeuresSup25 += $heuresSup25;
                    $totalHeuresSup50 += $heuresSup50;
                    $totalHeuresNuit += $heuresNuitSemaine;
                    $totalHeuresDimanche += $heuresDimancheSemaine;
                    $totalHeuresJoursFeries += $heuresJoursFeriesSemaine;
                    $totalAbsences += $absencesSemaine;
                }

                // Ajouter la semaine aux résultats si elle fait partie du mois
                if ($debutSemaine->month === $dateDebut->month || $finSemaine->month === $dateDebut->month) {
                    $resultatsSemaines[] = [
                        'periode' => $debutSemaine->format('d') . ' au ' . $finSemaine->format('d/m/Y'),
                        'total_heures' => $this->convertToHHMM($heuresSemaine),
                        'heures_sup_25' => $this->convertToHHMM($heuresSup25),
                        'heures_sup_50' => $this->convertToHHMM($heuresSup50),
                        'heures_nuit' => $this->convertToHHMM($heuresNuitSemaine),
                        'heures_dimanche' => $this->convertToHHMM($heuresDimancheSemaine),
                        'heures_jours_feries' => $this->convertToHHMM($heuresJoursFeriesSemaine),
                        'absences' => $absencesSemaine
                    ];
                }

                $date->addWeek();
            }

            // Convertir les tableaux associatifs en tableaux indexés pour le JSON
            $detailsDimanchesArray = array_values($detailsDimanches);
            $detailsJoursFeriesArray = array_values($detailsJoursFeries);
            $detailsHeuresNuitArray = array_values($detailsHeuresNuit);
            
            // Convertir les heures en format HH:MM
            foreach ($detailsDimanchesArray as &$dimanche) {
                $dimanche['heures'] = $this->convertToHHMM($dimanche['heures']);
            }
            
            foreach ($detailsJoursFeriesArray as &$jourFerie) {
                $jourFerie['heures'] = $this->convertToHHMM($jourFerie['heures']);
            }
            
            foreach ($detailsHeuresNuitArray as &$nuit) {
                $nuit['heures'] = $this->convertToHHMM($nuit['heures']);
            }
            
            // Préparer les données pour les graphiques
            $dataGraphique = [
                'labels' => ['Heures normales', 'Heures sup. 25%', 'Heures sup. 50%', 'Heures de nuit', 'Heures dimanche', 'Heures jours fériés'],
                'data' => [
                    $totalHeuresMois - $totalHeuresSup25 - $totalHeuresSup50 - $totalHeuresNuit - $totalHeuresDimanche - $totalHeuresJoursFeries,
                    $totalHeuresSup25,
                    $totalHeuresSup50,
                    $totalHeuresNuit,
                    $totalHeuresDimanche,
                    $totalHeuresJoursFeries
                ],
                'backgroundColor' => [
                    'rgba(75, 192, 192, 0.6)',  // Heures normales - turquoise
                    'rgba(255, 159, 64, 0.6)', // Heures sup 25% - orange
                    'rgba(255, 99, 132, 0.6)', // Heures sup 50% - rouge
                    'rgba(54, 162, 235, 0.6)', // Heures de nuit - bleu
                    'rgba(153, 102, 255, 0.6)', // Heures dimanche - violet
                    'rgba(255, 0, 0, 0.6)'     // Heures jours fériés - rouge vif
                ]
            ];
            
            return response()->json([
                'semaines' => $resultatsSemaines,
                'total_mois' => [
                    'heures' => $this->convertToHHMM($totalHeuresMois),
                    'heures_sup_25' => $this->convertToHHMM($totalHeuresSup25),
                    'heures_sup_50' => $this->convertToHHMM($totalHeuresSup50),
                    'heures_nuit' => $this->convertToHHMM($totalHeuresNuit),
                    'heures_dimanche' => $this->convertToHHMM($totalHeuresDimanche),
                    'heures_jours_feries' => $this->convertToHHMM($totalHeuresJoursFeries),
                    'absences' => $totalAbsences
                ],
                'details' => [
                    'dimanches' => $detailsDimanchesArray,
                    'jours_feries' => $detailsJoursFeriesArray,
                    'heures_nuit' => $detailsHeuresNuitArray
                ],
                'graphique' => $dataGraphique
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'error' => 'Une erreur est survenue lors du calcul des heures : ' . $e->getMessage()
            ], 500);
        }
    }

    private function convertToHHMM($decimal)
    {
        // Enlever le signe négatif pour l'affichage
        $decimal = abs($decimal);
        
        $hours = floor($decimal);
        $minutes = round(($decimal - $hours) * 60);
        
        // Si les minutes sont 60, ajuster les heures
        if ($minutes == 60) {
            $hours++;
            $minutes = 0;
        }
        
        return sprintf("%02d:%02d", $hours, $minutes);
    }

    private function convertHHMMToFloat($heures)
    {
        if (strpos($heures, ':') === false) {
            return floatval($heures);
        }
        
        list($h, $m) = explode(':', $heures);
        return intval($h) + (intval($m) / 60);
    }

    private function calculerHeuresPourPlanning($planning)
    {
        $heuresNormales = $planning->heures_travaillees;
        $heuresDimanche = 0;
        $heuresJoursFeries = 0;
        $heuresNuit = 0;

        $date = Carbon::parse($planning->date);

        // Vérifier si c'est un dimanche
        if ($date->isDayOfWeek(Carbon::SUNDAY)) {
            $heuresDimanche = $heuresNormales;
            $heuresNormales = 0;
        }
        // Vérifier si c'est un jour férié
        else if ($this->estJourFerie($date)) {
            $heuresJoursFeries = $heuresNormales;
            $heuresNormales = 0;
        }

        return [
            'normales' => $heuresNormales,
            'dimanche' => $heuresDimanche,
            'joursFeries' => $heuresJoursFeries,
            'nuit' => $heuresNuit
        ];
    }

    private function calculerHeuresDeNuit($heureDebut, $heureFin)
    {
        // Récupérer la date du planning pour créer les heures de nuit avec la même date
        $dateReference = $heureDebut->copy()->startOfDay();
        
        // Créer les bornes de la période de nuit avec la même date que le planning
        $debutNuit = $dateReference->copy()->setTime(21, 0, 0);
        $finNuit = $dateReference->copy()->addDay()->setTime(6, 0, 0);
        
        $heuresNuit = 0;
        
        // Si le planning chevauche la période de nuit
        if ($heureDebut->lt($finNuit) || $heureFin->gt($debutNuit)) {
            // Calculer l'intersection avec la période de nuit
            $debutPeriode = $heureDebut->gt($debutNuit) ? $heureDebut : $debutNuit;
            $finPeriode = $heureFin->lt($finNuit) ? $heureFin : $finNuit;
            
            if ($debutPeriode->lt($finPeriode)) {
                $heuresNuit = $debutPeriode->floatDiffInHours($finPeriode);
            }
        }
        
        return $heuresNuit;
    }

    private function estJourFerie($date)
    {
        // Liste des jours fériés en France pour l'année en cours
        $joursFeries = [
            '01-01', // Jour de l'an
            '05-01', // Fête du travail
            '05-08', // Victoire 1945
            '07-14', // Fête nationale
            '08-15', // Assomption
            '11-01', // Toussaint
            '11-11', // Armistice
            '12-25'  // Noël
        ];

        return in_array($date->format('m-d'), $joursFeries);
    }
    
    private function getNomJourFerie($date)
    {
        $joursFeriesNoms = [
            '01-01' => 'Jour de l\'an',
            '05-01' => 'Fête du travail',
            '05-08' => 'Victoire 1945',
            '07-14' => 'Fête nationale',
            '08-15' => 'Assomption',
            '11-01' => 'Toussaint',
            '11-11' => 'Armistice',
            '12-25' => 'Noël'
        ];
        
        $dateFormat = $date->format('m-d');
        return isset($joursFeriesNoms[$dateFormat]) ? $joursFeriesNoms[$dateFormat] : 'Jour férié';    
    }
}
